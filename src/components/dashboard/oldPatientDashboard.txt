import React, { useState } from 'react';
import { Activity, Pill, FileText, AlertCircle, Clock, CheckCircle, Plus, FileEdit, AlertTriangle, Stethoscope } from 'lucide-react';
import type { Patient, Medication, ClinicalNote, ChiefComplaint } from '../../types';

interface PatientDashboardProps {
  patient: Patient;
}

export const PatientDashboard: React.FC<PatientDashboardProps> = ({ patient }) => {
  const [selectedTab, setSelectedTab] = useState<'active' | 'history'>('active');
  const [showNewNoteForm, setShowNewNoteForm] = useState(false);
  const [showEditComplaint, setShowEditComplaint] = useState(false);
  const [editedComplaint, setEditedComplaint] = useState<ChiefComplaint | null>(
    patient.chiefComplaint || null
  );
  const [newNote, setNewNote] = useState({
    content: '',
    category: 'General' as ClinicalNote['category'],
    priority: 'Low' as ClinicalNote['priority']
  });

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const renderMedicationList = (medications: Medication[]) => {
    return medications.map((medication) => (
      <div key={medication.id} className="border-b border-gray-100 pb-4 mb-4 last:mb-0 last:pb-0 last:border-0">
        <div className="flex justify-between items-start">
          <div className="flex-1">
            <div className="flex items-center">
              <h4 className="font-medium text-gray-900">{medication.name}</h4>
              {medication.status === 'active' ? (
                <span className="ml-2 px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                  Active
                </span>
              ) : (
                <span className="ml-2 px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                  Inactive
                </span>
              )}
            </div>
            <p className="text-sm text-gray-600 mt-1">
              {medication.dosage} - {medication.frequency}
            </p>
            <div className="flex items-center text-sm text-gray-500 mt-1">
              <Clock className="h-4 w-4 mr-1" />
              {formatDate(medication.startDate)}
              {medication.endDate && ` - ${formatDate(medication.endDate)}`}
            </div>
            {medication.discontinuationReason && (
              <p className="text-sm text-gray-600 mt-1">
                Reason: {medication.discontinuationReason}
              </p>
            )}
          </div>
          <div className="text-right">
            <span className="text-sm text-gray-500">
              Prescribed by: {medication.prescribedBy}
            </span>
          </div>
        </div>
      </div>
    ));
  };

  const getPriorityColor = (priority: ClinicalNote['priority']) => {
    switch (priority) {
      case 'High':
        return 'text-red-600 bg-red-50';
      case 'Medium':
        return 'text-yellow-600 bg-yellow-50';
      default:
        return 'text-green-600 bg-green-50';
    }
  };

  const getSeverityColor = (severity: ChiefComplaint['severity']) => {
    switch (severity) {
      case 'Severe':
        return 'text-red-600 bg-red-50';
      case 'Moderate':
        return 'text-yellow-600 bg-yellow-50';
      default:
        return 'text-green-600 bg-green-50';
    }
  };

  const getCategoryIcon = (category: ClinicalNote['category']) => {
    switch (category) {
      case 'Emergency':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'Lab Results':
        return <FileEdit className="h-4 w-4 text-blue-500" />;
      case 'Treatment Plan':
        return <FileText className="h-4 w-4 text-green-500" />;
      default:
        return <FileText className="h-4 w-4 text-gray-500" />;
    }
  };

  const handleSubmitNote = (e: React.FormEvent) => {
    e.preventDefault();
    // In a real app, this would make an API call to save the note
    setShowNewNoteForm(false);
    setNewNote({
      content: '',
      category: 'General',
      priority: 'Low'
    });
  };

  const handleSubmitComplaint = (e: React.FormEvent) => {
    e.preventDefault();
    // In a real app, this would make an API call to save the complaint
    setShowEditComplaint(false);
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">{patient.name}</h1>
        <p className="text-gray-600">Patient ID: {patient.id}</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium text-gray-900">Temperature</h3>
            <Activity className="h-5 w-5 text-blue-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900">{patient.vitalSigns.temperature}Â°C</p>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium text-gray-900">Blood Pressure</h3>
            <Activity className="h-5 w-5 text-blue-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900">{patient.vitalSigns.bloodPressure}</p>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium text-gray-900">Heart Rate</h3>
            <Activity className="h-5 w-5 text-blue-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900">{patient.vitalSigns.heartRate} BPM</p>
        </div>

        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium text-gray-900">O2 Saturation</h3>
            <Activity className="h-5 w-5 text-blue-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900">{patient.vitalSigns.oxygenSaturation}%</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 mb-6">
            <div className="flex items-center justify-between p-6 border-b border-gray-100">
              <div className="flex items-center">
                <Stethoscope className="h-5 w-5 text-blue-500 mr-2" />
                <h2 className="text-xl font-bold text-gray-900">Chief Complaint</h2>
              </div>
              <button
                onClick={() => setShowEditComplaint(!showEditComplaint)}
                className="flex items-center px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-700"
              >
                <FileEdit className="h-4 w-4 mr-1" />
                {showEditComplaint ? 'Cancel' : 'Edit'}
              </button>
            </div>

            {showEditComplaint ? (
              <div className="p-6">
                <form onSubmit={handleSubmitComplaint}>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Description
                      </label>
                      <textarea
                        value={editedComplaint?.description || ''}
                        onChange={(e) => setEditedComplaint(prev => prev ? {...prev, description: e.target.value} : null)}
                        className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Describe the chief complaint..."
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Onset Date
                        </label>
                        <input
                          type="date"
                          value={editedComplaint?.onsetDate || ''}
                          onChange={(e) => setEditedComplaint(prev => prev ? {...prev, onsetDate: e.target.value} : null)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Severity
                        </label>
                        <select
                          value={editedComplaint?.severity || 'Mild'}
                          onChange={(e) => setEditedComplaint(prev => prev ? {...prev, severity: e.target.value as ChiefComplaint['severity']} : null)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        >
                          <option value="Mild">Mild</option>
                          <option value="Moderate">Moderate</option>
                          <option value="Severe">Severe</option>
                        </select>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Symptoms (one per line)
                      </label>
                      <textarea
                        value={editedComplaint?.symptoms.join('\n') || ''}
                        onChange={(e) => setEditedComplaint(prev => prev ? {...prev, symptoms: e.target.value.split('\n')} : null)}
                        className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Enter symptoms..."
                      />
                    </div>
                    <div className="flex justify-end">
                      <button
                        type="submit"
                        className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700"
                      >
                        Save Changes
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            ) : patient.chiefComplaint ? (
              <div className="p-6">
                <div className="mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getSeverityColor(patient.chiefComplaint.severity)}`}>
                      {patient.chiefComplaint.severity} Severity
                    </span>
                    <span className="text-sm text-gray-500">
                      Onset: {formatDate(patient.chiefComplaint.onsetDate)}
                    </span>
                  </div>
                  <p className="text-gray-800 font-medium">{patient.chiefComplaint.description}</p>
                </div>
                <div className="space-y-2">
                  <h4 className="text-sm font-medium text-gray-700">Symptoms:</h4>
                  <ul className="list-disc list-inside space-y-1">
                    {patient.chiefComplaint.symptoms.map((symptom, index) => (
                      <li key={index} className="text-sm text-gray-600">{symptom}</li>
                    ))}
                  </ul>
                </div>
                <div className="mt-4 text-sm text-gray-500">
                  Last updated: {formatDate(patient.chiefComplaint.lastUpdated)} by {patient.chiefComplaint.updatedBy}
                </div>
              </div>
            ) : (
              <div className="p-6 text-center text-gray-500">
                No chief complaint recorded
              </div>
            )}
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-100">
            <div className="flex items-center justify-between p-6 border-b border-gray-100">
              <h2 className="text-xl font-bold text-gray-900">Medications</h2>
              <Pill className="h-5 w-5 text-blue-500" />
            </div>
            
            <div className="border-b border-gray-100">
              <div className="flex">
                <button
                  className={`flex-1 px-6 py-3 text-sm font-medium ${
                    selectedTab === 'active'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                  onClick={() => setSelectedTab('active')}
                >
                  <div className="flex items-center justify-center">
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Active Medications
                  </div>
                </button>
                <button
                  className={`flex-1 px-6 py-3 text-sm font-medium ${
                    selectedTab === 'history'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                  onClick={() => setSelectedTab('history')}
                >
                  <div className="flex items-center justify-center">
                    <Clock className="h-4 w-4 mr-2" />
                    Medication History
                  </div>
                </button>
              </div>
            </div>

            <div className="p-6">
              {selectedTab === 'active' ? (
                renderMedicationList(patient.medications)
              ) : (
                renderMedicationList(patient.medicationHistory)
              )}
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-100 mt-6">
            <div className="flex items-center justify-between p-6 border-b border-gray-100">
              <h2 className="text-xl font-bold text-gray-900">Clinical Notes</h2>
              <button
                onClick={() => setShowNewNoteForm(!showNewNoteForm)}
                className="flex items-center px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-700"
              >
                <Plus className="h-4 w-4 mr-1" />
                Add Note
              </button>
            </div>

            {showNewNoteForm && (
              <div className="p-6 border-b border-gray-100 bg-gray-50">
                <form onSubmit={handleSubmitNote}>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Note Content
                      </label>
                      <textarea
                        value={newNote.content}
                        onChange={(e) => setNewNote({ ...newNote, content: e.target.value })}
                        className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Enter clinical note..."
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Category
                        </label>
                        <select
                          value={newNote.category}
                          onChange={(e) => setNewNote({ ...newNote, category: e.target.value as ClinicalNote['category'] })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        >
                          <option value="General">General</option>
                          <option value="Follow-up">Follow-up</option>
                          <option value="Lab Results">Lab Results</option>
                          <option value="Treatment Plan">Treatment Plan</option>
                          <option value="Emergency">Emergency</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Priority
                        </label>
                        <select
                          value={newNote.priority}
                          onChange={(e) => setNewNote({ ...newNote, priority: e.target.value as ClinicalNote['priority'] })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        >
                          <option value="Low">Low</option>
                          <option value="Medium">Medium</option>
                          <option value="High">High</option>
                        </select>
                      </div>
                    </div>
                    <div className="flex justify-end space-x-3">
                      <button
                        type="button"
                        onClick={() => setShowNewNoteForm(false)}
                        className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700"
                      >
                        Save Note
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            )}

            <div className="divide-y divide-gray-100">
              {patient.clinicalNotes.map((note) => (
                <div key={note.id} className="p-6">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center">
                      {getCategoryIcon(note.category)}
                      <span className="ml-2 text-sm font-medium text-gray-900">
                        {note.category}
                      </span>
                      {note.priority && (
                        <span className={`ml-2 px-2 py-0.5 text-xs font-medium rounded-full ${getPriorityColor(note.priority)}`}>
                          {note.priority} Priority
                        </span>
                      )}
                    </div>
                    <div className="text-sm text-gray-500">
                      {formatDate(note.date)}
                    </div>
                  </div>
                  <p className="text-gray-600 mb-2">{note.content}</p>
                  <div className="text-sm text-gray-500">
                    By: {note.doctor}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div>
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-gray-900">Allergies</h2>
              <AlertCircle className="h-5 w-5 text-red-500" />
            </div>
            <div className="space-y-2">
              {patient.allergies.map((allergy, index) => (
                <div
                  key={index}
                  className="flex items-center space-x-2 text-sm text-gray-700 bg-red-50 p-2 rounded"
                >
                  <span>{allergy}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100 mt-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-gray-900">Medical History</h2>
              <FileText className="h-5 w-5 text-blue-500" />
            </div>
            <button className="w-full py-2 px-4 border border-blue-500 text-blue-500 rounded-lg hover:bg-blue-50">
              View Full History
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};