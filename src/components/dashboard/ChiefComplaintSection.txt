// src/components/dashboard/ChiefComplaintSection.tsx
import React from 'react';
import { FileEdit, Stethoscope } from 'lucide-react';
import type { ChiefComplaint } from '../../types';
import { supabase } from '../../lib/supabaseClient';

interface Props {
  chiefComplaint: ChiefComplaint | null | undefined;
  showEditComplaint: boolean;
  setShowEditComplaint: (value: boolean) => void;
  editedComplaint: ChiefComplaint | null;
  setEditedComplaint: React.Dispatch<React.SetStateAction<ChiefComplaint | null>>;
  formatDate: (date: string) => string;
}

const getSeverityColor = (severity: ChiefComplaint['severity']) => {
  switch (severity) {
    case 'Severe':
      return 'text-red-600 bg-red-50';
    case 'Moderate':
      return 'text-yellow-600 bg-yellow-50';
    default:
      return 'text-green-600 bg-green-50';
  }
};

const ChiefComplaintSection: React.FC<Props> = ({
  chiefComplaint,
  showEditComplaint,
  setShowEditComplaint,
  editedComplaint,
  setEditedComplaint,
  formatDate
}) => {
 const handleSubmitComplaint = async (e: React.FormEvent) => {
  e.preventDefault();
  if (!editedComplaint) return;

  try {
    await updateChiefComplaint(editedComplaint);
    setShowEditComplaint(false);
    // Optionally show a success message or refresh data
  } catch {
    alert('Failed to save changes. Please try again.');
  }
};

const updateChiefComplaint = async (complaint: ChiefComplaint) => {
  try {
    const { data, error } = await supabase
      .from('chief_complaints')
      .update({
        description: complaint.description,
        onsetDate: complaint.onsetDate,
        severity: complaint.severity,
        symptoms: complaint.symptoms,
        lastUpdated: new Date().toISOString(),
        updatedBy: complaint.updatedBy, // Make sure this info is available
      })
      .eq('id', complaint.id)
      .single();

    if (error) throw error;

    return data;
  } catch (error) {
    console.error('Error updating chief complaint:', error);
    throw error;
  }
};

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-100 mb-6 min-h-[400px]">
        
      <div className="flex items-center justify-between p-6 border-b border-gray-100">
        <div className="flex items-center">
          <Stethoscope className="h-5 w-5 text-blue-500 mr-2" />
          <h2 className="text-xl font-bold text-gray-900">Chief Complaint</h2>
        </div>
        <button
          onClick={() => setShowEditComplaint(!showEditComplaint)}
          className="flex items-center px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-700"
        >
          <FileEdit className="h-4 w-4 mr-1" />
          {showEditComplaint ? 'Cancel' : 'Edit'}
        </button>
      </div>

      {showEditComplaint ? (
        <div className="p-6">
          <form onSubmit={handleSubmitComplaint}>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea
                  value={editedComplaint?.description || ''}
                  onChange={(e) =>
                    setEditedComplaint((prev) => (prev ? { ...prev, description: e.target.value } : null))
                  }
                  className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Onset Date</label>
                  <input
                    type="date"
                    value={editedComplaint?.onsetDate || ''}
                    onChange={(e) =>
                      setEditedComplaint((prev) => (prev ? { ...prev, onsetDate: e.target.value } : null))
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Severity</label>
                  <select
                    value={editedComplaint?.severity || 'Mild'}
                    onChange={(e) =>
                      setEditedComplaint((prev) =>
                        prev ? { ...prev, severity: e.target.value as ChiefComplaint['severity'] } : null
                      )
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="Mild">Mild</option>
                    <option value="Moderate">Moderate</option>
                    <option value="Severe">Severe</option>
                  </select>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Symptoms</label>
                <textarea
                  value={editedComplaint?.symptoms.join('\n') || ''}
                  onChange={(e) =>
                    setEditedComplaint((prev) =>
                      prev ? { ...prev, symptoms: e.target.value.split('\n') } : null
                    )
                  }
                  className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              <div className="flex justify-end">
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700"
                >
                  Save Changes
                </button>
              </div>
            </div>
          </form>
        </div>
      ) : chiefComplaint ? (
        <div className="p-6">
          <div className="mb-4">
            <div className="flex items-center justify-between mb-2">
              <span className={`px-2 py-1 text-xs font-medium rounded-full ${getSeverityColor(chiefComplaint.severity)}`}>
                {chiefComplaint.severity} Severity
              </span>
              <span className="text-sm text-gray-500">Onset: {formatDate(chiefComplaint.onsetDate)}</span>
            </div>
            <p className="text-gray-800 font-medium">{chiefComplaint.description}</p>
          </div>
          <div className="space-y-2">
            <h4 className="text-sm font-medium text-gray-700">Symptoms:</h4>
            <ul className="list-disc list-inside space-y-1">
              {chiefComplaint.symptoms.map((symptom, idx) => (
                <li key={idx} className="text-sm text-gray-600">
                  {symptom}
                </li>
              ))}
            </ul>
          </div>
          <div className="mt-4 text-sm text-gray-500">
            Last updated: {formatDate(chiefComplaint.lastUpdated)} by {chiefComplaint.updatedBy}
          </div>
        </div>
      ) : (
        <div className="p-6 text-center text-gray-500">No chief complaint recorded</div>
      )}
    </div>
  );
};

export default ChiefComplaintSection;
